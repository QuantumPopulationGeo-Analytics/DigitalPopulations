/*-secure-
{"_perm_cache_times":{"pagetime":1336807145,"foldertime":1273260772,"permtime":1296499724},"_valid_as_of":1336807307,"author":{"perm":"admin","name":"William R. Zwicky","first_name":"William R.","last_name":"Zwicky","email":"wrzwicky@pobox.com","image":"http:\/\/files.pbworks.com\/userimage\/e27cda3470cb4359f5676dc94a968d8048d1ef28\/yes\/48x48\/1278122855","lastview":1336806900,"lastviewtext":"6 minutes","is_verified":true,"uid":"bed028d9953d4e1825545766a1ac21c043a9537a"},"current_revision":1314786664,"hasPlugins":false,"has_custom_perms":false,"hidden":false,"html":"<p>Google Earth allows detailed descriptions to be attached to placemarks. &nbsp;The text appears in a popup \"bubble\" or \"balloon\" when the user clicks on a placemark. &nbsp;The *2Kml tools allow the description text to be generated from a <em>template&nbsp;file<\/em> which produces a block of styled text for each household in the input file.<\/p>\n<p>&nbsp;<\/p>\n<p>The template file is an HTML file containing special markers.&nbsp; The file is processed once for each input record, and the markers are replaced with values from the input record.&nbsp; The resulting text is copied into the placemark description.<\/p>\n<p>&nbsp;<\/p>\n<p>To create a template file from scratch, follow this sequence:<\/p>\n<p>&nbsp;<\/p>\n<ol>\n<li>Run Csv2Kml with --gentemplate to create a simple working file to start with.<\/li>\n<li>Edit and refine the generated file as needed.<\/li>\n<li>Run Csv2Kml with --testtemplate to ensure the template appears correctly.<\/li>\n<li>Run Csv2Kml normally and verify the result works correctly in Google Earth.<\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<hr \/>\n<p>&nbsp;<\/p>\n<h2>Testing Support<\/h2>\n<p>&nbsp;<\/p>\n<p>Dp2Kml provides two tools to help build templates.<\/p>\n<p>&nbsp;<\/p>\n<ul>\n<li>--gentemplate will construct a simple template from the input   tables.&nbsp; This template will contain all columns from the households   file, as well as all columns from all $members if a population file is   specified.<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<table border=\"0\" width=\"100%\">\n<tbody>\n<tr>\n<td><span style=\"font-family:'Courier New';\">dp2kml houses.csv peoples.csv --gentemplate &gt; bubble.html<\/span> <br \/><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>&nbsp;<\/p>\n<ul>\n<li>--testtemplate generates a plain HTML by evaluating the template  file  over 10 random households.&nbsp; This file can be opened in a browser  to  verify the template.<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<table border=\"0\" width=\"100%\">\n<tbody>\n<tr>\n<td><span style=\"font-family:'Courier New';\">dp2kml houses.csv peoples.csv --bubble mytemplate.html --testtemplate<\/span><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>&nbsp;<\/p>\n<hr \/>\n<p>&nbsp;<\/p>\n<h2>The Template File<\/h2>\n<p>&nbsp;<\/p>\n<p>The template file is a composite of three scripting \"languages\" which work together to produce styled text:<\/p>\n<ol>\n<li><strong>HTML<\/strong>, the language of the World Wide Web. Google Earth can display blocks of HTML in bubbles exactly as if they were mini web browsers.&nbsp; Into the HTML is inserted chunks of code using ...<\/li>\n<li><strong>Apache Velocity<\/strong>, the template processing language.&nbsp; The Velocity engine evaluates the chunks, and replaces them with data from the input file.&nbsp; Velocity gains access to the input file by way of ...<\/li>\n<li><strong>Dp2Kml itself<\/strong>, which prepares each data record, and calls Velocity to generate the bubble text for the corresponding placemark.&nbsp; Dp2Kml also provides a library of helpful functions that can be called from the template file.<\/li>\n<\/ol>\n<p><br \/>The HTML is plain HTML as it's used on the Internet, with some slight modifications:&nbsp; the &lt;HTML&gt;, &lt;HEAD&gt;, and &lt;BODY&gt; wrapper elements are not necessary, and some elements won't work the same as they do in a browser. &nbsp;However, most elements work exactly the way you'd expect. &nbsp;You can even use a GUI designer to build the HTML file.<\/p>\n<p>&nbsp;<\/p>\n<p>Apache Velocity processes the HTML template file, inserting data values as requested.&nbsp; Velocity uses a special language to identify variables and functions that need to be evaluated.&nbsp; The variable is then removed, and replaced with the result of the evaluation.&nbsp; See the documentation for all the tricks available:<br \/><br \/><a href=\"http:\/\/velocity.apache.org\/engine\/devel\/user-guide.html\">http:\/\/velocity.apache.org\/engine\/devel\/user-guide.html<\/a><\/p>\n<p>&nbsp;<\/p>\n<table style=\"width:100%;\" border=\"0\">\n<tbody>\n<tr>\n<td>\n<p>Example:<\/p>\n<p><span style=\"font-family:'Courier New';\">&lt;P&gt;There are $point.member_count members in this household.&lt;\/P&gt; <\/span><\/p>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>&nbsp;<\/p>\n<p>Dp2Kml provides the <em>context<\/em> in which the above template is evaluated. &nbsp;A \"context\" is a list of variables and functions that can be directly accessed with the $ notation.&nbsp; The *2Kml tools provide one or two variables, depending on input files:<\/p>\n<p>&nbsp;<\/p>\n<ul>\n<li>$point is the data from one household.&nbsp; It holds all the fields from one row of the households table.&nbsp; This will generally be one of the rzn###-households.csv files generated by Digital Populations, but Csv2Kml can process any tabular file.<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<ul>\n<li>$members is only provided by Dp2Kml, and contains a list of the members of the current household.&nbsp; The variable is only available if a population file is being processed with the households file.&nbsp; The value is a list of rows, and each row&nbsp;contains all of the fields from one row of the population table (generally rzn###-population.csv as generated by Digital Populations.)<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<p>Dp2Kml also provides some utility functions, documented below.<\/p>\n<p>&nbsp;<\/p>\n<p>Individual fields can be accessed by name or by column number.&nbsp; Velocity will remove the reference text, then fetch the referenced  column from the current row, and insert that value in its place.&nbsp; Any of these methods will work:<\/p>\n<p>&nbsp;<\/p>\n<ul>\n<li><span style=\"font-family:'Courier New';\">$point[index]<\/span><\/li>\n<li><span style=\"font-family:'Courier New';\">$point.Clean_Column<\/span><\/li>\n<li><span style=\"font-family:'Courier New';\">$point[\"Column Name\"]<\/span><\/li>\n<li><span style=\"font-family:'Courier New';\">$point[\"Clean_Column\"]<\/span><\/li>\n<li><span style=\"font-family:'Courier New';\">$point.get(\"Column Name\")<\/span><\/li>\n<li><span style=\"font-family:'Courier New';\">$point.get(\"Clean_Column\")<\/span><\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<p>\"Index\" is simply a column number, where the leftmost column has the value 0 (zero).&nbsp; \"Column Name\" is the value in the first row of the table for a column, where column names are traditionally stored.&nbsp; \"Clean_Column\" is a <em>cleaned<\/em> version of the column name, since Velocity imposes certain restrictions on names when they are not enclosed in quotes.&nbsp; Dp2Kml applies two transforms to convert column names into clean columns:<\/p>\n<p>&nbsp;<\/p>\n<ol>\n<li>All characters that are not letters or numbers are replaced with underscores \"_\".&nbsp; Velocity prohibits a certain selection of characters from appearing in field names, but for simplicity, Dp2Kml replaces everything that isn't a letter or number.<\/li>\n<li>Consecutive underscores are replaced with a single underscore. <\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<table style=\"width:100%;\" border=\"0\">\n<tbody>\n<tr>\n<td>\n<p>For example, a column named <span style=\"font-family:'Courier New';\">$data$_$column$<\/span> in the CSV file would be referenced as \"<span style=\"font-family:'Courier New';\">$point._data_column_<\/span>\". &nbsp;Rule 1 converts the title to \"_data___column_\", then rule 2 collapses the underscores to form \"_data_column_\".<\/p>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>&nbsp;<\/p>\n<p>In other words, $point.name works for the \"clean\" version of the name, while $point[\"name\"] and $point.get(\"name\") work for both the clean name as well as the original table header.&nbsp; And $point.[number] works if you know the index of the column you want (though numbers shouldn't be used as they stop working if the columns are rearranged.)&nbsp; Because of the above, velocity supports tricks like this:<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<table border=\"0\" width=\"90%\" align=\"right\">\n<tbody>\n<tr>\n<td><span style=\"font-family:'Courier New';\">#set($n = \"Person assessing scores\")<\/span><br \/><span style=\"font-family:'Courier New';\">&lt;TD&gt;$n&lt;\/TD&gt;&lt;TD&gt;$point[$n]&lt;\/TD&gt;<\/span> <br \/><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>&nbsp;<\/p>\n<hr \/>\n<p>&nbsp;<\/p>\n<h2>Utility Functions<\/h2>\n<p>&nbsp;<\/p>\n<p>The velocity language does not provide any helper functions by default, so the tools provide a few:<\/p>\n<p>&nbsp;<\/p>\n<ul>\n<li>$ConversionTool -- Utility methods from Velocity class <a href=\"http:\/\/velocity.apache.org\/tools\/devel\/javadoc\/org\/apache\/velocity\/tools\/generic\/ConversionTool.html\">ConversionTool<\/a>.<\/li>\n<li>$DisplayTool-- Utility methods from Velocity class <a href=\"http:\/\/velocity.apache.org\/tools\/devel\/javadoc\/org\/apache\/velocity\/tools\/generic\/DisplayTool.html\">DisplayTool<\/a>.<\/li>\n<li>$MathTool -- Utility methods from Velocity class <a href=\"http:\/\/velocity.apache.org\/tools\/devel\/javadoc\/org\/apache\/velocity\/tools\/generic\/MathTool.html\">MathTool<\/a>.<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<p>Helper functions are accessed by name, much like the fields in $point.<\/p>\n<p>&nbsp;<\/p>\n<table style=\"width:100%;\" border=\"0\">\n<tbody>\n<tr>\n<td>\n<p>Example:<\/p>\n<p><span style=\"font-family:'Courier New';\">$MathTool.div($point.age_of_house, 12)<\/span>&nbsp;<\/p>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>&nbsp;<\/p>\n<hr \/>\n<p>&nbsp;<\/p>\n<h2>Caveats<\/h2>\n<p>&nbsp;<\/p>\n<p>Here are a few other notes for working with Velocity:<\/p>\n<ul>\n<li><span style=\"font-family:'Courier New';\">$foreach.count<\/span> starts from 1, not zero.<\/li>\n<li>Math expressions can only be used inside <span style=\"font-family:'Courier New';\">#set<\/span>, although utility functions can be called anywhere.<\/li>\n<li><em>null<\/em> is not the same as \"\"; conditionals must test for both:&nbsp; <span style=\"font-family:'Courier New';\">#if($v &amp;&amp; $v != \"\")<\/span><\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<hr \/>\n<p>&nbsp;<\/p>","locked":false,"mtime":1314786664,"name":"Bubble Templates","oid":30654734,"perms":{"r":true},"revcount":21,"revurl":"http:\/\/digitalpopulations.pbworks.com\/w\/page\/30654734\/Bubble%20Templates","size":9790,"wikistyle":false}
*/
